{"ast":null,"code":"var _jsxFileName = \"/root/coding/react-jokes-classes/src/JokeList.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Joke from './Joke';\nimport './JokeList.css';\n\nclass JokeList extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      jokes: []\n    };\n\n    this.jokesToNone = () => {\n      this.setState({\n        jokes: []\n      });\n    };\n  }\n\n  /* get jokes if there are no jokes */\n  componentDidMount() {\n    this.getJokes();\n    console.log(this.state.jokes);\n  }\n\n  async getJokes() {\n    let j = [...this.state.jokes];\n    let seenJokes = new Set();\n\n    try {\n      while (j.length < 10) {\n        let res = await axios.get('https://icanhazdadjoke.com', {\n          headers: {\n            Accept: 'application/json'\n          }\n        });\n        let {\n          status,\n          ...jokeObj\n        } = res.data;\n\n        if (!seenJokes.has(jokeObj.id)) {\n          seenJokes.add(jokeObj.id);\n          j.push({ ...jokeObj,\n            votes: 0\n          });\n        } else {\n          console.error('duplicate found!');\n        }\n      }\n\n      if (this.state.jokes.length) {\n        let sortedJokes = [...this.state.jokes].sort((a, b) => b.votes - a.votes);\n        this.setState({\n          jokes: sortedJokes\n        });\n        return;\n      }\n\n      console.Console.l;\n      this.setState({\n        jokes: j\n      });\n    } catch (e) {\n      console.log(e);\n    }\n  } // upVote = () => vote(id, +1);\n  // downVote = () => vote(id, -1)\n\n\n  //   if (jokes.length === 0) getJokes();\n  // }, [jokes, numJokesToGet]);\n  // /* empty joke list and then call getJokes */\n  generateNewJokes() {\n    this.jokesToNone();\n    this.getJokes();\n  } // /* change vote for this id by delta (+1 or -1) */\n\n\n  vote(id, delta) {\n    this.setState({\n      jokes: allJokes => allJokes.map(j => j.id === id ? { ...j,\n        votes: j.votes + delta\n      } : j)\n    });\n  } // render() {\n  // \tthis.state.jokes.map((joke)=>(\n  // \t\t<div>\n  // \t\t\t{this.props.render({\n  // \t\t\t\tvote: this.vote,\n  // \t\t\t\tid: joke.id,\n  // \t\t\t\tcount: this.state.count,\n  // \t\t\t})}\n  // \t\t</div>\n  //     )\n  // \t);\n  // }\n\n\n  render() {\n    // console.log(this.state.jokes);\n    // this.state.jokes.map((joke) => console.log(joke));\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 10\n      }\n    });\n  } // /* render: either loading spinner or list of sorted jokes. */\n  //   return (\n  //     <div className=\"JokeList\">\n  //       <button className=\"JokeList-getmore\" onClick={generateNewJokes}>\n  //         Get New Jokes\n  //       </button>\n  //       {sortedJokes.map(j => (\n  //         <Joke text={j.joke} key={j.id} id={j.id} votes={j.votes} vote={vote} />\n  //       ))}\n  //     </div>\n  //   );\n  // }\n  // return null;\n\n\n} //--------------old function hook-------------------------------\n// function JokeList({ numJokesToGet = 10 }) {\n//   const [jokes, setJokes] = useState([]);\n//   /* get jokes if there are no jokes */\n//   useEffect(function() {\n//     async function getJokes() {\n//       let j = [...jokes];\n//       let seenJokes = new Set();\n//       try {\n//         while (j.length < numJokesToGet) {\n//           let res = await axios.get(\"https://icanhazdadjoke.com\", {\n//             headers: { Accept: \"application/json\" }\n//           });\n//           let { status, ...jokeObj } = res.data;\n//           if (!seenJokes.has(jokeObj.id)) {\n//             seenJokes.add(jokeObj.id);\n//             j.push({ ...jokeObj, votes: 0 });\n//           } else {\n//             console.error(\"duplicate found!\");\n//           }\n//         }\n//         setJokes(j);\n//       } catch (e) {\n//         console.log(e);\n//       }\n//     }\n//     if (jokes.length === 0) getJokes();\n//   }, [jokes, numJokesToGet]);\n\n/* empty joke list and then call getJokes */\n// function generateNewJokes() {\n//   setJokes([]);\n// }\n\n/* change vote for this id by delta (+1 or -1) */\n// function vote(id, delta) {\n//   setJokes(allJokes =>\n//     allJokes.map(j => (j.id === id ? { ...j, votes: j.votes + delta } : j))\n//   );\n// }\n//   /* render: either loading spinner or list of sorted jokes. */\n//   if (jokes.length) {\n//     let sortedJokes = [...jokes].sort((a, b) => b.votes - a.votes);\n//     return (\n//       <div className=\"JokeList\">\n//         <button className=\"JokeList-getmore\" onClick={generateNewJokes}>\n//           Get New Jokes\n//         </button>\n//         {sortedJokes.map(j => (\n//           <Joke text={j.joke} key={j.id} id={j.id} votes={j.votes} vote={vote} />\n//         ))}\n//       </div>\n//     );\n//   }\n//   return null;\n// }\n\n\nexport default JokeList;","map":{"version":3,"sources":["/root/coding/react-jokes-classes/src/JokeList.js"],"names":["React","useState","useEffect","axios","Joke","JokeList","Component","state","jokes","jokesToNone","setState","componentDidMount","getJokes","console","log","j","seenJokes","Set","length","res","get","headers","Accept","status","jokeObj","data","has","id","add","push","votes","error","sortedJokes","sort","a","b","Console","l","e","generateNewJokes","vote","delta","allJokes","map","render"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Joke from './Joke';\nimport './JokeList.css';\n\nclass JokeList extends React.Component {\n\tstate = { jokes: [] };\n\n\t/* get jokes if there are no jokes */\n\n\tcomponentDidMount() {\n\t\tthis.getJokes();\n\t\tconsole.log(this.state.jokes);\n\t}\n\n\tasync getJokes() {\n\t\tlet j = [...this.state.jokes];\n\t\tlet seenJokes = new Set();\n\t\ttry {\n\t\t\twhile (j.length < 10) {\n\t\t\t\tlet res = await axios.get('https://icanhazdadjoke.com', {\n\t\t\t\t\theaders: { Accept: 'application/json' },\n\t\t\t\t});\n\t\t\t\tlet { status, ...jokeObj } = res.data;\n\n\t\t\t\tif (!seenJokes.has(jokeObj.id)) {\n\t\t\t\t\tseenJokes.add(jokeObj.id);\n\t\t\t\t\tj.push({ ...jokeObj, votes: 0 });\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error('duplicate found!');\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this.state.jokes.length) {\n\t\t\t\tlet sortedJokes = [...this.state.jokes].sort(\n\t\t\t\t\t(a, b) => b.votes - a.votes\n\t\t\t\t);\n\t\t\t\tthis.setState({ jokes: sortedJokes });\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconsole.Console.l;\n\t\t\tthis.setState({ jokes: j });\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t}\n\t// upVote = () => vote(id, +1);\n\t// downVote = () => vote(id, -1)\n\n\tjokesToNone = () => {\n\t\tthis.setState({ jokes: [] });\n\t};\n\n\t//   if (jokes.length === 0) getJokes();\n\t// }, [jokes, numJokesToGet]);\n\n\t// /* empty joke list and then call getJokes */\n\n\tgenerateNewJokes() {\n\t\tthis.jokesToNone();\n\t\tthis.getJokes();\n\t}\n\n\t// /* change vote for this id by delta (+1 or -1) */\n\n\tvote(id, delta) {\n\t\tthis.setState({\n\t\t\tjokes: (allJokes) =>\n\t\t\t\tallJokes.map((j) =>\n\t\t\t\t\tj.id === id ? { ...j, votes: j.votes + delta } : j\n\t\t\t\t),\n\t\t});\n\t}\n\n\t// render() {\n\t// \tthis.state.jokes.map((joke)=>(\n\t// \t\t<div>\n\t// \t\t\t{this.props.render({\n\t// \t\t\t\tvote: this.vote,\n\t// \t\t\t\tid: joke.id,\n\t// \t\t\t\tcount: this.state.count,\n\t// \t\t\t})}\n\t// \t\t</div>\n\t//     )\n\t// \t);\n\t// }\n\trender() {\n\t\t// console.log(this.state.jokes);\n\t\t// this.state.jokes.map((joke) => console.log(joke));\n\t\treturn <div></div>;\n\t}\n\n\t// /* render: either loading spinner or list of sorted jokes. */\n\n\t//   return (\n\t//     <div className=\"JokeList\">\n\t//       <button className=\"JokeList-getmore\" onClick={generateNewJokes}>\n\t//         Get New Jokes\n\t//       </button>\n\n\t//       {sortedJokes.map(j => (\n\t//         <Joke text={j.joke} key={j.id} id={j.id} votes={j.votes} vote={vote} />\n\t//       ))}\n\t//     </div>\n\t//   );\n\t// }\n\n\t// return null;\n}\n\n//--------------old function hook-------------------------------\n\n// function JokeList({ numJokesToGet = 10 }) {\n//   const [jokes, setJokes] = useState([]);\n\n//   /* get jokes if there are no jokes */\n\n//   useEffect(function() {\n//     async function getJokes() {\n//       let j = [...jokes];\n//       let seenJokes = new Set();\n//       try {\n//         while (j.length < numJokesToGet) {\n//           let res = await axios.get(\"https://icanhazdadjoke.com\", {\n//             headers: { Accept: \"application/json\" }\n//           });\n//           let { status, ...jokeObj } = res.data;\n\n//           if (!seenJokes.has(jokeObj.id)) {\n//             seenJokes.add(jokeObj.id);\n//             j.push({ ...jokeObj, votes: 0 });\n//           } else {\n//             console.error(\"duplicate found!\");\n//           }\n//         }\n//         setJokes(j);\n//       } catch (e) {\n//         console.log(e);\n//       }\n//     }\n\n//     if (jokes.length === 0) getJokes();\n//   }, [jokes, numJokesToGet]);\n\n/* empty joke list and then call getJokes */\n\n// function generateNewJokes() {\n//   setJokes([]);\n// }\n\n/* change vote for this id by delta (+1 or -1) */\n\n// function vote(id, delta) {\n//   setJokes(allJokes =>\n//     allJokes.map(j => (j.id === id ? { ...j, votes: j.votes + delta } : j))\n//   );\n// }\n\n//   /* render: either loading spinner or list of sorted jokes. */\n\n//   if (jokes.length) {\n//     let sortedJokes = [...jokes].sort((a, b) => b.votes - a.votes);\n\n//     return (\n//       <div className=\"JokeList\">\n//         <button className=\"JokeList-getmore\" onClick={generateNewJokes}>\n//           Get New Jokes\n//         </button>\n\n//         {sortedJokes.map(j => (\n//           <Joke text={j.joke} key={j.id} id={j.id} votes={j.votes} vote={vote} />\n//         ))}\n//       </div>\n//     );\n//   }\n\n//   return null;\n\n// }\n\nexport default JokeList;\n"]},"metadata":{},"sourceType":"module"}