{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Joke from './Joke';\nimport './JokeList.css';\n\nclass JokeList extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      jokes: this.getJokes()\n    };\n\n    this.jokesToNone = () => {\n      this.setState({\n        jokes: []\n      });\n    };\n  }\n\n  /* get jokes if there are no jokes */\n  async getJokes() {\n    let j = [...jokes];\n    let seenJokes = new Set();\n\n    try {\n      while (j.length < numJokesToGet) {\n        let res = await axios.get('https://icanhazdadjoke.com', {\n          headers: {\n            Accept: 'application/json'\n          }\n        });\n        let {\n          status,\n          ...jokeObj\n        } = res.data;\n\n        if (!seenJokes.has(jokeObj.id)) {\n          seenJokes.add(jokeObj.id);\n          j.push({ ...jokeObj,\n            votes: 0\n          });\n        } else {\n          console.error('duplicate found!');\n        }\n      }\n\n      setJokes(j);\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  //   if (jokes.length === 0) getJokes();\n  // }, [jokes, numJokesToGet]);\n  // /* empty joke list and then call getJokes */\n  generateNewJokes() {\n    jokesToNone();\n  } // /* change vote for this id by delta (+1 or -1) */\n  // function vote(id, delta) {\n  //   setJokes(allJokes =>\n  //     allJokes.map(j => (j.id === id ? { ...j, votes: j.votes + delta } : j))\n  //   );\n  // }\n  // /* render: either loading spinner or list of sorted jokes. */\n  // if (jokes.length) {\n  //   let sortedJokes = [...jokes].sort((a, b) => b.votes - a.votes);\n  //   return (\n  //     <div className=\"JokeList\">\n  //       <button className=\"JokeList-getmore\" onClick={generateNewJokes}>\n  //         Get New Jokes\n  //       </button>\n  //       {sortedJokes.map(j => (\n  //         <Joke text={j.joke} key={j.id} id={j.id} votes={j.votes} vote={vote} />\n  //       ))}\n  //     </div>\n  //   );\n  // }\n  // return null;\n\n\n} // function JokeList({ numJokesToGet = 10 }) {\n//   const [jokes, setJokes] = useState([]);\n//   /* get jokes if there are no jokes */\n//   useEffect(function() {\n//     async function getJokes() {\n//       let j = [...jokes];\n//       let seenJokes = new Set();\n//       try {\n//         while (j.length < numJokesToGet) {\n//           let res = await axios.get(\"https://icanhazdadjoke.com\", {\n//             headers: { Accept: \"application/json\" }\n//           });\n//           let { status, ...jokeObj } = res.data;\n//           if (!seenJokes.has(jokeObj.id)) {\n//             seenJokes.add(jokeObj.id);\n//             j.push({ ...jokeObj, votes: 0 });\n//           } else {\n//             console.error(\"duplicate found!\");\n//           }\n//         }\n//         setJokes(j);\n//       } catch (e) {\n//         console.log(e);\n//       }\n//     }\n//     if (jokes.length === 0) getJokes();\n//   }, [jokes, numJokesToGet]);\n//   /* empty joke list and then call getJokes */\n//   function generateNewJokes() {\n//     setJokes([]);\n//   }\n//   /* change vote for this id by delta (+1 or -1) */\n//   function vote(id, delta) {\n//     setJokes(allJokes =>\n//       allJokes.map(j => (j.id === id ? { ...j, votes: j.votes + delta } : j))\n//     );\n//   }\n//   /* render: either loading spinner or list of sorted jokes. */\n//   if (jokes.length) {\n//     let sortedJokes = [...jokes].sort((a, b) => b.votes - a.votes);\n//     return (\n//       <div className=\"JokeList\">\n//         <button className=\"JokeList-getmore\" onClick={generateNewJokes}>\n//           Get New Jokes\n//         </button>\n//         {sortedJokes.map(j => (\n//           <Joke text={j.joke} key={j.id} id={j.id} votes={j.votes} vote={vote} />\n//         ))}\n//       </div>\n//     );\n//   }\n//   return null;\n// }\n\n\nexport default JokeList;","map":{"version":3,"sources":["/root/coding/react-jokes-classes/src/JokeList.js"],"names":["React","useState","useEffect","axios","Joke","JokeList","Component","state","jokes","getJokes","jokesToNone","setState","j","seenJokes","Set","length","numJokesToGet","res","get","headers","Accept","status","jokeObj","data","has","id","add","push","votes","console","error","setJokes","e","log","generateNewJokes"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,gBAAP;;AAEA,MAAMC,QAAN,SAAuBL,KAAK,CAACM,SAA7B,CAAuC;AAAA;AAAA;AAAA,SACtCC,KADsC,GAC9B;AAAEC,MAAAA,KAAK,EAAE,KAAKC,QAAL;AAAT,KAD8B;;AAAA,SA4BtCC,WA5BsC,GA4BxB,MAAM;AACnB,WAAKC,QAAL,CAAc;AAAEH,QAAAA,KAAK,EAAE;AAAT,OAAd;AACA,KA9BqC;AAAA;;AAGtC;AAEc,QAARC,QAAQ,GAAG;AAChB,QAAIG,CAAC,GAAG,CAAC,GAAGJ,KAAJ,CAAR;AACA,QAAIK,SAAS,GAAG,IAAIC,GAAJ,EAAhB;;AACA,QAAI;AACH,aAAOF,CAAC,CAACG,MAAF,GAAWC,aAAlB,EAAiC;AAChC,YAAIC,GAAG,GAAG,MAAMd,KAAK,CAACe,GAAN,CAAU,4BAAV,EAAwC;AACvDC,UAAAA,OAAO,EAAE;AAAEC,YAAAA,MAAM,EAAE;AAAV;AAD8C,SAAxC,CAAhB;AAGA,YAAI;AAAEC,UAAAA,MAAF;AAAU,aAAGC;AAAb,YAAyBL,GAAG,CAACM,IAAjC;;AAEA,YAAI,CAACV,SAAS,CAACW,GAAV,CAAcF,OAAO,CAACG,EAAtB,CAAL,EAAgC;AAC/BZ,UAAAA,SAAS,CAACa,GAAV,CAAcJ,OAAO,CAACG,EAAtB;AACAb,UAAAA,CAAC,CAACe,IAAF,CAAO,EAAE,GAAGL,OAAL;AAAcM,YAAAA,KAAK,EAAE;AAArB,WAAP;AACA,SAHD,MAGO;AACNC,UAAAA,OAAO,CAACC,KAAR,CAAc,kBAAd;AACA;AACD;;AACDC,MAAAA,QAAQ,CAACnB,CAAD,CAAR;AACA,KAfD,CAeE,OAAOoB,CAAP,EAAU;AACXH,MAAAA,OAAO,CAACI,GAAR,CAAYD,CAAZ;AACA;AACD;;AAMD;AACA;AAEA;AAEAE,EAAAA,gBAAgB,GAAG;AAClBxB,IAAAA,WAAW;AACX,GAvCqC,CAyCtC;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAnEsC,C,CAqEvC;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;AAEA,eAAeL,QAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Joke from './Joke';\nimport './JokeList.css';\n\nclass JokeList extends React.Component {\n\tstate = { jokes: this.getJokes() };\n\n\t/* get jokes if there are no jokes */\n\n\tasync getJokes() {\n\t\tlet j = [...jokes];\n\t\tlet seenJokes = new Set();\n\t\ttry {\n\t\t\twhile (j.length < numJokesToGet) {\n\t\t\t\tlet res = await axios.get('https://icanhazdadjoke.com', {\n\t\t\t\t\theaders: { Accept: 'application/json' },\n\t\t\t\t});\n\t\t\t\tlet { status, ...jokeObj } = res.data;\n\n\t\t\t\tif (!seenJokes.has(jokeObj.id)) {\n\t\t\t\t\tseenJokes.add(jokeObj.id);\n\t\t\t\t\tj.push({ ...jokeObj, votes: 0 });\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error('duplicate found!');\n\t\t\t\t}\n\t\t\t}\n\t\t\tsetJokes(j);\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t}\n\n\tjokesToNone = () => {\n\t\tthis.setState({ jokes: [] });\n\t};\n\n\t//   if (jokes.length === 0) getJokes();\n\t// }, [jokes, numJokesToGet]);\n\n\t// /* empty joke list and then call getJokes */\n\n\tgenerateNewJokes() {\n\t\tjokesToNone();\n\t}\n\n\t// /* change vote for this id by delta (+1 or -1) */\n\n\t// function vote(id, delta) {\n\t//   setJokes(allJokes =>\n\t//     allJokes.map(j => (j.id === id ? { ...j, votes: j.votes + delta } : j))\n\t//   );\n\t// }\n\n\t// /* render: either loading spinner or list of sorted jokes. */\n\n\t// if (jokes.length) {\n\t//   let sortedJokes = [...jokes].sort((a, b) => b.votes - a.votes);\n\n\t//   return (\n\t//     <div className=\"JokeList\">\n\t//       <button className=\"JokeList-getmore\" onClick={generateNewJokes}>\n\t//         Get New Jokes\n\t//       </button>\n\n\t//       {sortedJokes.map(j => (\n\t//         <Joke text={j.joke} key={j.id} id={j.id} votes={j.votes} vote={vote} />\n\t//       ))}\n\t//     </div>\n\t//   );\n\t// }\n\n\t// return null;\n}\n// function JokeList({ numJokesToGet = 10 }) {\n//   const [jokes, setJokes] = useState([]);\n\n//   /* get jokes if there are no jokes */\n\n//   useEffect(function() {\n//     async function getJokes() {\n//       let j = [...jokes];\n//       let seenJokes = new Set();\n//       try {\n//         while (j.length < numJokesToGet) {\n//           let res = await axios.get(\"https://icanhazdadjoke.com\", {\n//             headers: { Accept: \"application/json\" }\n//           });\n//           let { status, ...jokeObj } = res.data;\n\n//           if (!seenJokes.has(jokeObj.id)) {\n//             seenJokes.add(jokeObj.id);\n//             j.push({ ...jokeObj, votes: 0 });\n//           } else {\n//             console.error(\"duplicate found!\");\n//           }\n//         }\n//         setJokes(j);\n//       } catch (e) {\n//         console.log(e);\n//       }\n//     }\n\n//     if (jokes.length === 0) getJokes();\n//   }, [jokes, numJokesToGet]);\n\n//   /* empty joke list and then call getJokes */\n\n//   function generateNewJokes() {\n//     setJokes([]);\n//   }\n\n//   /* change vote for this id by delta (+1 or -1) */\n\n//   function vote(id, delta) {\n//     setJokes(allJokes =>\n//       allJokes.map(j => (j.id === id ? { ...j, votes: j.votes + delta } : j))\n//     );\n//   }\n\n//   /* render: either loading spinner or list of sorted jokes. */\n\n//   if (jokes.length) {\n//     let sortedJokes = [...jokes].sort((a, b) => b.votes - a.votes);\n\n//     return (\n//       <div className=\"JokeList\">\n//         <button className=\"JokeList-getmore\" onClick={generateNewJokes}>\n//           Get New Jokes\n//         </button>\n\n//         {sortedJokes.map(j => (\n//           <Joke text={j.joke} key={j.id} id={j.id} votes={j.votes} vote={vote} />\n//         ))}\n//       </div>\n//     );\n//   }\n\n//   return null;\n\n// }\n\nexport default JokeList;\n"]},"metadata":{},"sourceType":"module"}