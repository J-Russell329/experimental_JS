{"ast":null,"code":"var _jsxFileName = \"/root/coding/react-jokes-classes/src/JokeList.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Joke from './Joke';\nimport './JokeList.css';\n\nconst JokeList = Component => {\n  return class extends React.Component {\n    constructor(...args) {\n      super(...args);\n      this.state = {\n        jokes: []\n      };\n\n      this.jokesToNone = () => {\n        this.setState({\n          jokes: []\n        });\n      };\n    }\n\n    componentDidMount() {\n      this.getJokes();\n    }\n\n    async getJokes() {\n      let j = [...this.state.jokes];\n      let seenJokes = new Set();\n\n      try {\n        while (j.length < 10) {\n          let res = await axios.get('https://icanhazdadjoke.com', {\n            headers: {\n              Accept: 'application/json'\n            }\n          });\n          let {\n            status,\n            ...jokeObj\n          } = res.data;\n\n          if (!seenJokes.has(jokeObj.id)) {\n            seenJokes.add(jokeObj.id);\n            j.push({ ...jokeObj,\n              votes: 0\n            });\n          } else {\n            console.error('duplicate found!');\n          }\n        }\n\n        if (this.state.jokes.length) {\n          let sortedJokes = [...this.state.jokes].sort((a, b) => b.votes - a.votes);\n          this.setState({\n            jokes: sortedJokes\n          });\n          return;\n        }\n\n        this.setState({\n          jokes: j\n        });\n        console.log(this.state.jokes);\n      } catch (e) {\n        console.log(e);\n      }\n    }\n\n    generateNewJokes() {\n      this.jokesToNone();\n      this.getJokes();\n    } // /* change vote for this id by delta (+1 or -1) */\n\n\n    vote(id, delta) {\n      this.setState({\n        jokes: allJokes => allJokes.map(j => j.id === id ? { ...j,\n          votes: j.votes + delta\n        } : j)\n      });\n    }\n\n    render() {\n      return /*#__PURE__*/React.createElement(Component, Object.assign({}, this.props, {\n        count: this.state.count,\n        onIncrease: this.handleIncrement,\n        onDecrease: this.handleDecrement,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 5\n        }\n      }));\n    }\n\n  };\n}; // class JokeList extends React.Component {\n// \tstate = { jokes: [] };\n// \t/* get jokes if there are no jokes */\n// \tcomponentDidMount() {\n// \t\tthis.getJokes();\n// \t}\n// \tasync getJokes() {\n// \t\tlet j = [...this.state.jokes];\n// \t\tlet seenJokes = new Set();\n// \t\ttry {\n// \t\t\twhile (j.length < 10) {\n// \t\t\t\tlet res = await axios.get('https://icanhazdadjoke.com', {\n// \t\t\t\t\theaders: { Accept: 'application/json' },\n// \t\t\t\t});\n// \t\t\t\tlet { status, ...jokeObj } = res.data;\n// \t\t\t\tif (!seenJokes.has(jokeObj.id)) {\n// \t\t\t\t\tseenJokes.add(jokeObj.id);\n// \t\t\t\t\tj.push({ ...jokeObj, votes: 0 });\n// \t\t\t\t} else {\n// \t\t\t\t\tconsole.error('duplicate found!');\n// \t\t\t\t}\n// \t\t\t}\n// \t\t\tif (this.state.jokes.length) {\n// \t\t\t\tlet sortedJokes = [...this.state.jokes].sort(\n// \t\t\t\t\t(a, b) => b.votes - a.votes\n// \t\t\t\t);\n// \t\t\t\tthis.setState({ jokes: sortedJokes });\n// \t\t\t\treturn;\n// \t\t\t}\n// \t\t\tthis.setState({ jokes: j });\n// \t\t\tconsole.log(this.state.jokes);\n// \t\t} catch (e) {\n// \t\t\tconsole.log(e);\n// \t\t}\n// \t}\n// \t// upVote = () => vote(id, +1);\n// \t// downVote = () => vote(id, -1)\n// \tjokesToNone = () => {\n// \t\tthis.setState({ jokes: [] });\n// \t};\n// \t//   if (jokes.length === 0) getJokes();\n// \t// }, [jokes, numJokesToGet]);\n// \t// /* empty joke list and then call getJokes */\n// \tgenerateNewJokes() {\n// \t\tthis.jokesToNone();\n// \t\tthis.getJokes();\n// \t}\n// \t// /* change vote for this id by delta (+1 or -1) */\n// \tvote(id, delta) {\n// \t\tthis.setState({\n// \t\t\tjokes: (allJokes) =>\n// \t\t\t\tallJokes.map((j) =>\n// \t\t\t\t\tj.id === id ? { ...j, votes: j.votes + delta } : j\n// \t\t\t\t),\n// \t\t});\n// \t}\n//   render() {\n//     return (\n//       <div>\n//         {this.props.render({\n//           increment: this.increment,\n//           decrement: this.decrement,\n//           count: this.state.count\n//         })}\n//       </div>\n//     );\n//   }\n// }\n// class JokeList extends React.Component {\n// \tstate = { jokes: [] };\n// \t/* get jokes if there are no jokes */\n// \tcomponentDidMount() {\n// \t\tthis.getJokes();\n// \t}\n// \tasync getJokes() {\n// \t\tlet j = [...this.state.jokes];\n// \t\tlet seenJokes = new Set();\n// \t\ttry {\n// \t\t\twhile (j.length < 10) {\n// \t\t\t\tlet res = await axios.get('https://icanhazdadjoke.com', {\n// \t\t\t\t\theaders: { Accept: 'application/json' },\n// \t\t\t\t});\n// \t\t\t\tlet { status, ...jokeObj } = res.data;\n// \t\t\t\tif (!seenJokes.has(jokeObj.id)) {\n// \t\t\t\t\tseenJokes.add(jokeObj.id);\n// \t\t\t\t\tj.push({ ...jokeObj, votes: 0 });\n// \t\t\t\t} else {\n// \t\t\t\t\tconsole.error('duplicate found!');\n// \t\t\t\t}\n// \t\t\t}\n// \t\t\tif (this.state.jokes.length) {\n// \t\t\t\tlet sortedJokes = [...this.state.jokes].sort(\n// \t\t\t\t\t(a, b) => b.votes - a.votes\n// \t\t\t\t);\n// \t\t\t\tthis.setState({ jokes: sortedJokes });\n// \t\t\t\treturn;\n// \t\t\t}\n// \t\t\tthis.setState({ jokes: j });\n// \t\t\tconsole.log(this.state.jokes);\n// \t\t} catch (e) {\n// \t\t\tconsole.log(e);\n// \t\t}\n// \t}\n// \t// upVote = () => vote(id, +1);\n// \t// downVote = () => vote(id, -1)\n// \tjokesToNone = () => {\n// \t\tthis.setState({ jokes: [] });\n// \t};\n// \t//   if (jokes.length === 0) getJokes();\n// \t// }, [jokes, numJokesToGet]);\n// \t// /* empty joke list and then call getJokes */\n// \tgenerateNewJokes() {\n// \t\tthis.jokesToNone();\n// \t\tthis.getJokes();\n// \t}\n// \t// /* change vote for this id by delta (+1 or -1) */\n// \tvote(id, delta) {\n// \t\tthis.setState({\n// \t\t\tjokes: (allJokes) =>\n// \t\t\t\tallJokes.map((j) =>\n// \t\t\t\t\tj.id === id ? { ...j, votes: j.votes + delta } : j\n// \t\t\t\t),\n// \t\t});\n// \t}\n//   render() {\n//     return (\n//       <div>\n//         {this.props.render({\n//           increment: this.increment,\n//           decrement: this.decrement,\n//           count: this.state.count\n//         })}\n//       </div>\n//     );\n//   }\n// render() {\n//   const jokes = this.state.jokes\n//   return (\n//     <div>\n//       <table class=\"table\">\n//           <tr>\n//               { headers.map(header => <th>{header}</th>) }\n//           </tr>\n//           { this.dogs.map(dog => {\n//               return <tr>{ headers.map(header => <td>{dog[header]}</td>) }</tr>\n//             }) }\n//       </table>\n//       </div>\n//   );\n// }\n// }\n// render() {\n// \treturn (this.state.jokes.map((joke) => (\n// \t\t<div>\n// \t\t\t{this.props.render({\n// \t\t\t\tvote: this.vote,\n// \t\t\t\tid: joke.id,\n// \t\t\t\tcount: this.state.count,\n// \t\t\t})}\n// \t\t</div>\n// \t)));\n// }\n// render() {\n// \tthis.state.jokes.map((joke) => console.log(joke));\n// \treturn <div>{['test', 'things']}</div>;\n// }\n// /* render: either loading spinner or list of sorted jokes. */\n//   return (\n//     <div className=\"JokeList\">\n//       <button className=\"JokeList-getmore\" onClick={generateNewJokes}>\n//         Get New Jokes\n//       </button>\n//       {sortedJokes.map(j => (\n//         <Joke text={j.joke} key={j.id} id={j.id} votes={j.votes} vote={vote} />\n//       ))}\n//     </div>\n//   );\n// }\n// return null;\n// }\n//--------------old function hook-------------------------------\n// function JokeList({ numJokesToGet = 10 }) {\n//   const [jokes, setJokes] = useState([]);\n//   /* get jokes if there are no jokes */\n//   useEffect(function() {\n//     async function getJokes() {\n//       let j = [...jokes];\n//       let seenJokes = new Set();\n//       try {\n//         while (j.length < numJokesToGet) {\n//           let res = await axios.get(\"https://icanhazdadjoke.com\", {\n//             headers: { Accept: \"application/json\" }\n//           });\n//           let { status, ...jokeObj } = res.data;\n//           if (!seenJokes.has(jokeObj.id)) {\n//             seenJokes.add(jokeObj.id);\n//             j.push({ ...jokeObj, votes: 0 });\n//           } else {\n//             console.error(\"duplicate found!\");\n//           }\n//         }\n//         setJokes(j);\n//       } catch (e) {\n//         console.log(e);\n//       }\n//     }\n//     if (jokes.length === 0) getJokes();\n//   }, [jokes, numJokesToGet]);\n\n/* empty joke list and then call getJokes */\n// function generateNewJokes() {\n//   setJokes([]);\n// }\n\n/* change vote for this id by delta (+1 or -1) */\n// function vote(id, delta) {\n//   setJokes(allJokes =>\n//     allJokes.map(j => (j.id === id ? { ...j, votes: j.votes + delta } : j))\n//   );\n// }\n//   /* render: either loading spinner or list of sorted jokes. */\n//   if (jokes.length) {\n//     let sortedJokes = [...jokes].sort((a, b) => b.votes - a.votes);\n//     return (\n//       <div className=\"JokeList\">\n//         <button className=\"JokeList-getmore\" onClick={generateNewJokes}>\n//           Get New Jokes\n//         </button>\n//         {sortedJokes.map(j => (\n//           <Joke text={j.joke} key={j.id} id={j.id} votes={j.votes} vote={vote} />\n//         ))}\n//       </div>\n//     );\n//   }\n//   return null;\n// }\n\n\nexport default JokeList;","map":{"version":3,"sources":["/root/coding/react-jokes-classes/src/JokeList.js"],"names":["React","useState","useEffect","axios","Joke","JokeList","Component","state","jokes","jokesToNone","setState","componentDidMount","getJokes","j","seenJokes","Set","length","res","get","headers","Accept","status","jokeObj","data","has","id","add","push","votes","console","error","sortedJokes","sort","a","b","log","e","generateNewJokes","vote","delta","allJokes","map","render","props","count","handleIncrement","handleDecrement"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Joke from './Joke';\nimport './JokeList.css';\n\nconst JokeList = (Component) => {\n\treturn class extends React.Component {\n\t\tstate = { jokes: [] };\n\n\t\tcomponentDidMount() {\n\t\t\tthis.getJokes();\n\t\t}\n\n\t\tasync getJokes() {\n\t\t\tlet j = [...this.state.jokes];\n\t\t\tlet seenJokes = new Set();\n\t\t\ttry {\n\t\t\t\twhile (j.length < 10) {\n\t\t\t\t\tlet res = await axios.get('https://icanhazdadjoke.com', {\n\t\t\t\t\t\theaders: { Accept: 'application/json' },\n\t\t\t\t\t});\n\t\t\t\t\tlet { status, ...jokeObj } = res.data;\n\n\t\t\t\t\tif (!seenJokes.has(jokeObj.id)) {\n\t\t\t\t\t\tseenJokes.add(jokeObj.id);\n\t\t\t\t\t\tj.push({ ...jokeObj, votes: 0 });\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error('duplicate found!');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (this.state.jokes.length) {\n\t\t\t\t\tlet sortedJokes = [...this.state.jokes].sort(\n\t\t\t\t\t\t(a, b) => b.votes - a.votes\n\t\t\t\t\t);\n\t\t\t\t\tthis.setState({ jokes: sortedJokes });\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.setState({ jokes: j });\n\t\t\t\tconsole.log(this.state.jokes);\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(e);\n\t\t\t}\n\t\t}\n\n\t\tjokesToNone = () => {\n\t\t\tthis.setState({ jokes: [] });\n\t\t};\n\n\t\tgenerateNewJokes() {\n\t\t\tthis.jokesToNone();\n\t\t\tthis.getJokes();\n\t\t}\n\n\t\t// /* change vote for this id by delta (+1 or -1) */\n\n\t\tvote(id, delta) {\n\t\t\tthis.setState({\n\t\t\t\tjokes: (allJokes) =>\n\t\t\t\t\tallJokes.map((j) =>\n\t\t\t\t\t\tj.id === id ? { ...j, votes: j.votes + delta } : j\n\t\t\t\t\t),\n\t\t\t});\n\t\t}\n\n\t\trender() {\n\t\t\treturn (\n\t\t\t\t<Component\n\t\t\t\t\t{...this.props}\n\t\t\t\t\tcount={this.state.count}\n\t\t\t\t\tonIncrease={this.handleIncrement}\n\t\t\t\t\tonDecrease={this.handleDecrement}\n\t\t\t\t/>\n\t\t\t);\n\t\t}\n\t};\n};\n\n// class JokeList extends React.Component {\n// \tstate = { jokes: [] };\n\n// \t/* get jokes if there are no jokes */\n\n// \tcomponentDidMount() {\n// \t\tthis.getJokes();\n// \t}\n\n// \tasync getJokes() {\n// \t\tlet j = [...this.state.jokes];\n// \t\tlet seenJokes = new Set();\n// \t\ttry {\n// \t\t\twhile (j.length < 10) {\n// \t\t\t\tlet res = await axios.get('https://icanhazdadjoke.com', {\n// \t\t\t\t\theaders: { Accept: 'application/json' },\n// \t\t\t\t});\n// \t\t\t\tlet { status, ...jokeObj } = res.data;\n\n// \t\t\t\tif (!seenJokes.has(jokeObj.id)) {\n// \t\t\t\t\tseenJokes.add(jokeObj.id);\n// \t\t\t\t\tj.push({ ...jokeObj, votes: 0 });\n// \t\t\t\t} else {\n// \t\t\t\t\tconsole.error('duplicate found!');\n// \t\t\t\t}\n// \t\t\t}\n// \t\t\tif (this.state.jokes.length) {\n// \t\t\t\tlet sortedJokes = [...this.state.jokes].sort(\n// \t\t\t\t\t(a, b) => b.votes - a.votes\n// \t\t\t\t);\n// \t\t\t\tthis.setState({ jokes: sortedJokes });\n// \t\t\t\treturn;\n// \t\t\t}\n// \t\t\tthis.setState({ jokes: j });\n// \t\t\tconsole.log(this.state.jokes);\n// \t\t} catch (e) {\n// \t\t\tconsole.log(e);\n// \t\t}\n// \t}\n// \t// upVote = () => vote(id, +1);\n// \t// downVote = () => vote(id, -1)\n\n// \tjokesToNone = () => {\n// \t\tthis.setState({ jokes: [] });\n// \t};\n\n// \t//   if (jokes.length === 0) getJokes();\n// \t// }, [jokes, numJokesToGet]);\n\n// \t// /* empty joke list and then call getJokes */\n\n// \tgenerateNewJokes() {\n// \t\tthis.jokesToNone();\n// \t\tthis.getJokes();\n// \t}\n\n// \t// /* change vote for this id by delta (+1 or -1) */\n\n// \tvote(id, delta) {\n// \t\tthis.setState({\n// \t\t\tjokes: (allJokes) =>\n// \t\t\t\tallJokes.map((j) =>\n// \t\t\t\t\tj.id === id ? { ...j, votes: j.votes + delta } : j\n// \t\t\t\t),\n// \t\t});\n// \t}\n//   render() {\n//     return (\n//       <div>\n//         {this.props.render({\n//           increment: this.increment,\n//           decrement: this.decrement,\n//           count: this.state.count\n//         })}\n//       </div>\n//     );\n//   }\n// }\n\n// class JokeList extends React.Component {\n// \tstate = { jokes: [] };\n\n// \t/* get jokes if there are no jokes */\n\n// \tcomponentDidMount() {\n// \t\tthis.getJokes();\n// \t}\n\n// \tasync getJokes() {\n// \t\tlet j = [...this.state.jokes];\n// \t\tlet seenJokes = new Set();\n// \t\ttry {\n// \t\t\twhile (j.length < 10) {\n// \t\t\t\tlet res = await axios.get('https://icanhazdadjoke.com', {\n// \t\t\t\t\theaders: { Accept: 'application/json' },\n// \t\t\t\t});\n// \t\t\t\tlet { status, ...jokeObj } = res.data;\n\n// \t\t\t\tif (!seenJokes.has(jokeObj.id)) {\n// \t\t\t\t\tseenJokes.add(jokeObj.id);\n// \t\t\t\t\tj.push({ ...jokeObj, votes: 0 });\n// \t\t\t\t} else {\n// \t\t\t\t\tconsole.error('duplicate found!');\n// \t\t\t\t}\n// \t\t\t}\n// \t\t\tif (this.state.jokes.length) {\n// \t\t\t\tlet sortedJokes = [...this.state.jokes].sort(\n// \t\t\t\t\t(a, b) => b.votes - a.votes\n// \t\t\t\t);\n// \t\t\t\tthis.setState({ jokes: sortedJokes });\n// \t\t\t\treturn;\n// \t\t\t}\n// \t\t\tthis.setState({ jokes: j });\n// \t\t\tconsole.log(this.state.jokes);\n// \t\t} catch (e) {\n// \t\t\tconsole.log(e);\n// \t\t}\n// \t}\n// \t// upVote = () => vote(id, +1);\n// \t// downVote = () => vote(id, -1)\n\n// \tjokesToNone = () => {\n// \t\tthis.setState({ jokes: [] });\n// \t};\n\n// \t//   if (jokes.length === 0) getJokes();\n// \t// }, [jokes, numJokesToGet]);\n\n// \t// /* empty joke list and then call getJokes */\n\n// \tgenerateNewJokes() {\n// \t\tthis.jokesToNone();\n// \t\tthis.getJokes();\n// \t}\n\n// \t// /* change vote for this id by delta (+1 or -1) */\n\n// \tvote(id, delta) {\n// \t\tthis.setState({\n// \t\t\tjokes: (allJokes) =>\n// \t\t\t\tallJokes.map((j) =>\n// \t\t\t\t\tj.id === id ? { ...j, votes: j.votes + delta } : j\n// \t\t\t\t),\n// \t\t});\n// \t}\n//   render() {\n//     return (\n//       <div>\n//         {this.props.render({\n//           increment: this.increment,\n//           decrement: this.decrement,\n//           count: this.state.count\n//         })}\n//       </div>\n//     );\n//   }\n\n// render() {\n//   const jokes = this.state.jokes\n\n//   return (\n//     <div>\n//       <table class=\"table\">\n//           <tr>\n//               { headers.map(header => <th>{header}</th>) }\n//           </tr>\n//           { this.dogs.map(dog => {\n//               return <tr>{ headers.map(header => <td>{dog[header]}</td>) }</tr>\n//             }) }\n//       </table>\n//       </div>\n//   );\n// }\n// }\n// render() {\n// \treturn (this.state.jokes.map((joke) => (\n// \t\t<div>\n// \t\t\t{this.props.render({\n// \t\t\t\tvote: this.vote,\n// \t\t\t\tid: joke.id,\n// \t\t\t\tcount: this.state.count,\n// \t\t\t})}\n// \t\t</div>\n// \t)));\n// }\n// render() {\n// \tthis.state.jokes.map((joke) => console.log(joke));\n// \treturn <div>{['test', 'things']}</div>;\n// }\n\n// /* render: either loading spinner or list of sorted jokes. */\n\n//   return (\n//     <div className=\"JokeList\">\n//       <button className=\"JokeList-getmore\" onClick={generateNewJokes}>\n//         Get New Jokes\n//       </button>\n\n//       {sortedJokes.map(j => (\n//         <Joke text={j.joke} key={j.id} id={j.id} votes={j.votes} vote={vote} />\n//       ))}\n//     </div>\n//   );\n// }\n\n// return null;\n// }\n\n//--------------old function hook-------------------------------\n\n// function JokeList({ numJokesToGet = 10 }) {\n//   const [jokes, setJokes] = useState([]);\n\n//   /* get jokes if there are no jokes */\n\n//   useEffect(function() {\n//     async function getJokes() {\n//       let j = [...jokes];\n//       let seenJokes = new Set();\n//       try {\n//         while (j.length < numJokesToGet) {\n//           let res = await axios.get(\"https://icanhazdadjoke.com\", {\n//             headers: { Accept: \"application/json\" }\n//           });\n//           let { status, ...jokeObj } = res.data;\n\n//           if (!seenJokes.has(jokeObj.id)) {\n//             seenJokes.add(jokeObj.id);\n//             j.push({ ...jokeObj, votes: 0 });\n//           } else {\n//             console.error(\"duplicate found!\");\n//           }\n//         }\n//         setJokes(j);\n//       } catch (e) {\n//         console.log(e);\n//       }\n//     }\n\n//     if (jokes.length === 0) getJokes();\n//   }, [jokes, numJokesToGet]);\n\n/* empty joke list and then call getJokes */\n\n// function generateNewJokes() {\n//   setJokes([]);\n// }\n\n/* change vote for this id by delta (+1 or -1) */\n\n// function vote(id, delta) {\n//   setJokes(allJokes =>\n//     allJokes.map(j => (j.id === id ? { ...j, votes: j.votes + delta } : j))\n//   );\n// }\n\n//   /* render: either loading spinner or list of sorted jokes. */\n\n//   if (jokes.length) {\n//     let sortedJokes = [...jokes].sort((a, b) => b.votes - a.votes);\n\n//     return (\n//       <div className=\"JokeList\">\n//         <button className=\"JokeList-getmore\" onClick={generateNewJokes}>\n//           Get New Jokes\n//         </button>\n\n//         {sortedJokes.map(j => (\n//           <Joke text={j.joke} key={j.id} id={j.id} votes={j.votes} vote={vote} />\n//         ))}\n//       </div>\n//     );\n//   }\n\n//   return null;\n\n// }\n\nexport default JokeList;\n"]},"metadata":{},"sourceType":"module"}