{"ast":null,"code":"var _jsxFileName = \"/root/coding/react-jokes-classes/src/JokeList.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Joke from './Joke';\nimport './JokeList.css';\n\nfunction JokeList({\n  numJokesToGet = 10\n}) {\n  const [jokes, setJokes] = useState([]);\n  /* get jokes if there are no jokes */\n\n  useEffect(function () {\n    async function getJokes() {\n      let j = [...jokes];\n      let seenJokes = new Set();\n\n      try {\n        while (j.length < numJokesToGet) {\n          let res = await axios.get('https://icanhazdadjoke.com', {\n            headers: {\n              Accept: 'application/json'\n            }\n          });\n          let {\n            status,\n            ...jokeObj\n          } = res.data;\n\n          if (!seenJokes.has(jokeObj.id)) {\n            seenJokes.add(jokeObj.id);\n            j.push({ ...jokeObj,\n              votes: 0\n            });\n          } else {\n            console.error('duplicate found!');\n          }\n        }\n\n        setJokes(j);\n      } catch (e) {\n        console.log(e);\n      }\n    }\n\n    if (jokes.length === 0) getJokes();\n  }, [jokes, numJokesToGet]);\n  /* empty joke list and then call getJokes */\n\n  function generateNewJokes() {\n    setJokes([]);\n  }\n  /* change vote for this id by delta (+1 or -1) */\n\n\n  function vote(id, delta) {\n    setJokes(allJokes => allJokes.map(j => j.id === id ? { ...j,\n      votes: j.votes + delta\n    } : j));\n  }\n  /* render: either loading spinner or list of sorted jokes. */\n\n\n  if (jokes.length) {\n    let sortedJokes = [...jokes].sort((a, b) => b.votes - a.votes);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"JokeList\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"JokeList-getmore\",\n      onClick: generateNewJokes,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 5\n      }\n    }, \"Get New Jokes\"), sortedJokes.map(j => /*#__PURE__*/React.createElement(Joke, {\n      text: j.joke,\n      key: j.id,\n      id: j.id,\n      votes: j.votes,\n      vote: vote,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 6\n      }\n    })));\n  }\n\n  return null;\n}\n\nexport default JokeList;","map":{"version":3,"sources":["/root/coding/react-jokes-classes/src/JokeList.js"],"names":["React","useState","useEffect","axios","Joke","JokeList","numJokesToGet","jokes","setJokes","getJokes","j","seenJokes","Set","length","res","get","headers","Accept","status","jokeObj","data","has","id","add","push","votes","console","error","e","log","generateNewJokes","vote","delta","allJokes","map","sortedJokes","sort","a","b","joke"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Joke from './Joke';\nimport './JokeList.css';\n\nfunction JokeList({ numJokesToGet = 10 }) {\n\tconst [jokes, setJokes] = useState([]);\n\n\t/* get jokes if there are no jokes */\n\n\tuseEffect(\n\t\tfunction () {\n\t\t\tasync function getJokes() {\n\t\t\t\tlet j = [...jokes];\n\t\t\t\tlet seenJokes = new Set();\n\t\t\t\ttry {\n\t\t\t\t\twhile (j.length < numJokesToGet) {\n\t\t\t\t\t\tlet res = await axios.get(\n\t\t\t\t\t\t\t'https://icanhazdadjoke.com',\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\theaders: { Accept: 'application/json' },\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t\t\tlet { status, ...jokeObj } = res.data;\n\n\t\t\t\t\t\tif (!seenJokes.has(jokeObj.id)) {\n\t\t\t\t\t\t\tseenJokes.add(jokeObj.id);\n\t\t\t\t\t\t\tj.push({ ...jokeObj, votes: 0 });\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.error('duplicate found!');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tsetJokes(j);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.log(e);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (jokes.length === 0) getJokes();\n\t\t},\n\t\t[jokes, numJokesToGet]\n\t);\n\n\t/* empty joke list and then call getJokes */\n\n\tfunction generateNewJokes() {\n\t\tsetJokes([]);\n\t}\n\n\t/* change vote for this id by delta (+1 or -1) */\n\n\tfunction vote(id, delta) {\n\t\tsetJokes((allJokes) =>\n\t\t\tallJokes.map((j) =>\n\t\t\t\tj.id === id ? { ...j, votes: j.votes + delta } : j\n\t\t\t)\n\t\t);\n\t}\n\n\t/* render: either loading spinner or list of sorted jokes. */\n\n\tif (jokes.length) {\n\t\tlet sortedJokes = [...jokes].sort((a, b) => b.votes - a.votes);\n\n\t\treturn (\n\t\t\t<div className=\"JokeList\">\n\t\t\t\t<button className=\"JokeList-getmore\" onClick={generateNewJokes}>\n\t\t\t\t\tGet New Jokes\n\t\t\t\t</button>\n\n\t\t\t\t{sortedJokes.map((j) => (\n\t\t\t\t\t<Joke\n\t\t\t\t\t\ttext={j.joke}\n\t\t\t\t\t\tkey={j.id}\n\t\t\t\t\t\tid={j.id}\n\t\t\t\t\t\tvotes={j.votes}\n\t\t\t\t\t\tvote={vote}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t);\n\t}\n\n\treturn null;\n}\n\nexport default JokeList;\n"]},"metadata":{},"sourceType":"module"}