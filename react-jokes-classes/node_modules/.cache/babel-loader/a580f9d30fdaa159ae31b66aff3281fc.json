{"ast":null,"code":"var _jsxFileName = \"/root/coding/react-jokes-classes/src/JokeList.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './JokeList.css';\n\nconst JokeList = Component => {\n  return class extends React.Component {\n    constructor(...args) {\n      super(...args);\n      this.state = {\n        jokes: []\n      };\n    }\n\n    /* get jokes if there are no jokes */\n    componentDidMount() {\n      this.getJokes();\n    }\n\n    async getJokes() {\n      let j = [...this.state.jokes];\n      let seenJokes = new Set();\n\n      try {\n        while (j.length < 10) {\n          let res = await axios.get('https://icanhazdadjoke.com', {\n            headers: {\n              Accept: 'application/json'\n            }\n          });\n          let {\n            status,\n            ...jokeObj\n          } = res.data;\n\n          if (!seenJokes.has(jokeObj.id)) {\n            seenJokes.add(jokeObj.id);\n            j.push({ ...jokeObj,\n              votes: 0\n            });\n          } else {\n            console.error('duplicate found!');\n          }\n        }\n\n        let sortedJokes = [...this.state.jokes].sort((a, b) => b.votes - a.votes);\n        this.setState({\n          state: sortedJokes\n        });\n      } catch (e) {\n        console.log(e);\n      }\n    }\n    /* empty joke list and then call getJokes */\n\n\n    generateNewJokes() {\n      this.setState({\n        state: []\n      });\n      this.getJokes();\n    }\n    /* change vote for this id by delta (+1 or -1) */\n\n\n    vote(id, delta) {\n      this.setState({\n        state: allJokes => allJokes.map(j => j.id === id ? { ...j,\n          votes: j.votes + delta\n        } : j)\n      });\n    }\n\n    render() {\n      return /*#__PURE__*/React.createElement(Component, Object.assign({}, this.props, {\n        count: this.state.count,\n        onIncrease: this.handleIncrement,\n        onDecrease: this.handleDecrement,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 5\n        }\n      }));\n    }\n\n  };\n  /* render: either loading spinner or list of sorted jokes. */\n  // \treturn (\n  // \t\t<div className=\"JokeList\">\n  // \t\t\t<button className=\"JokeList-getmore\" onClick={generateNewJokes}>\n  // \t\t\t\tGet New Jokes\n  // \t\t\t</button>\n  // \t\t\t{sortedJokes.map((j) => (\n  // \t\t\t\t<Joke\n  // \t\t\t\t\ttext={j.joke}\n  // \t\t\t\t\tkey={j.id}\n  // \t\t\t\t\tid={j.id}\n  // \t\t\t\t\tvotes={j.votes}\n  // \t\t\t\t\tvote={vote}\n  // \t\t\t\t/>\n  // \t\t\t))}\n  // \t\t</div>\n  // \t);\n  // }\n  // return null;\n}; // function JokeList({ numJokesToGet = 10 }) {\n// \tconst [jokes, setJokes] = useState([]);\n// \t/* get jokes if there are no jokes */\n// \tuseEffect(\n// \t\tfunction () {\n// \t\t\tasync function getJokes() {\n// \t\t\t\tlet j = [...jokes];\n// \t\t\t\tlet seenJokes = new Set();\n// \t\t\t\ttry {\n// \t\t\t\t\twhile (j.length < numJokesToGet) {\n// \t\t\t\t\t\tlet res = await axios.get(\n// \t\t\t\t\t\t\t'https://icanhazdadjoke.com',\n// \t\t\t\t\t\t\t{\n// \t\t\t\t\t\t\t\theaders: { Accept: 'application/json' },\n// \t\t\t\t\t\t\t}\n// \t\t\t\t\t\t);\n// \t\t\t\t\t\tlet { status, ...jokeObj } = res.data;\n// \t\t\t\t\t\tif (!seenJokes.has(jokeObj.id)) {\n// \t\t\t\t\t\t\tseenJokes.add(jokeObj.id);\n// \t\t\t\t\t\t\tj.push({ ...jokeObj, votes: 0 });\n// \t\t\t\t\t\t} else {\n// \t\t\t\t\t\t\tconsole.error('duplicate found!');\n// \t\t\t\t\t\t}\n// \t\t\t\t\t}\n// \t\t\t\t\tsetJokes(j);\n// \t\t\t\t} catch (e) {\n// \t\t\t\t\tconsole.log(e);\n// \t\t\t\t}\n// \t\t\t}\n// \t\t\tif (jokes.length === 0) getJokes();\n// \t\t},\n// \t\t[jokes, numJokesToGet]\n// \t);\n// \t/* empty joke list and then call getJokes */\n// \tfunction generateNewJokes() {\n// \t\tsetJokes([]);\n// \t}\n// \t/* change vote for this id by delta (+1 or -1) */\n// \tfunction vote(id, delta) {\n// \t\tsetJokes((allJokes) =>\n// \t\t\tallJokes.map((j) =>\n// \t\t\t\tj.id === id ? { ...j, votes: j.votes + delta } : j\n// \t\t\t)\n// \t\t);\n// \t}\n// \t/* render: either loading spinner or list of sorted jokes. */\n// \tif (jokes.length) {\n// \t\tlet sortedJokes = [...jokes].sort((a, b) => b.votes - a.votes);\n// \t\treturn (\n// \t\t\t<div className=\"JokeList\">\n// \t\t\t\t<button className=\"JokeList-getmore\" onClick={generateNewJokes}>\n// \t\t\t\t\tGet New Jokes\n// \t\t\t\t</button>\n// \t\t\t\t{sortedJokes.map((j) => (\n// \t\t\t\t\t<Joke\n// \t\t\t\t\t\ttext={j.joke}\n// \t\t\t\t\t\tkey={j.id}\n// \t\t\t\t\t\tid={j.id}\n// \t\t\t\t\t\tvotes={j.votes}\n// \t\t\t\t\t\tvote={vote}\n// \t\t\t\t\t/>\n// \t\t\t\t))}\n// \t\t\t</div>\n// \t\t);\n// \t}\n// \treturn null;\n// }\n\n\nexport default JokeList;","map":{"version":3,"sources":["/root/coding/react-jokes-classes/src/JokeList.js"],"names":["React","useState","useEffect","axios","JokeList","Component","state","jokes","componentDidMount","getJokes","j","seenJokes","Set","length","res","get","headers","Accept","status","jokeObj","data","has","id","add","push","votes","console","error","sortedJokes","sort","a","b","setState","e","log","generateNewJokes","vote","delta","allJokes","map","render","props","count","handleIncrement","handleDecrement"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './JokeList.css';\n\nconst JokeList = (Component) => {\n\treturn class extends React.Component {\n\t\tstate = {\n\t\t\tjokes: [],\n\t\t};\n\n\t\t/* get jokes if there are no jokes */\n\n\t\tcomponentDidMount() {\n\t\t\tthis.getJokes();\n\t\t}\n\n\t\tasync getJokes() {\n\t\t\tlet j = [...this.state.jokes];\n\t\t\tlet seenJokes = new Set();\n\t\t\ttry {\n\t\t\t\twhile (j.length < 10) {\n\t\t\t\t\tlet res = await axios.get('https://icanhazdadjoke.com', {\n\t\t\t\t\t\theaders: { Accept: 'application/json' },\n\t\t\t\t\t});\n\t\t\t\t\tlet { status, ...jokeObj } = res.data;\n\n\t\t\t\t\tif (!seenJokes.has(jokeObj.id)) {\n\t\t\t\t\t\tseenJokes.add(jokeObj.id);\n\n\t\t\t\t\t\tj.push({ ...jokeObj, votes: 0 });\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error('duplicate found!');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlet sortedJokes = [...this.state.jokes].sort(\n\t\t\t\t\t(a, b) => b.votes - a.votes\n\t\t\t\t);\n\t\t\t\tthis.setState({ state: sortedJokes });\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(e);\n\t\t\t}\n\t\t}\n\n\t\t/* empty joke list and then call getJokes */\n\n\t\tgenerateNewJokes() {\n\t\t\tthis.setState({ state: [] });\n\t\t\tthis.getJokes();\n\t\t}\n\n\t\t/* change vote for this id by delta (+1 or -1) */\n\n\t\tvote(id, delta) {\n\t\t\tthis.setState({\n\t\t\t\tstate: (allJokes) =>\n\t\t\t\t\tallJokes.map((j) =>\n\t\t\t\t\t\tj.id === id ? { ...j, votes: j.votes + delta } : j\n\t\t\t\t\t),\n\t\t\t});\n\t\t}\n\n\t\trender() {\n\t\t\treturn (\n\t\t\t\t<Component\n\t\t\t\t\t{...this.props}\n\t\t\t\t\tcount={this.state.count}\n\t\t\t\t\tonIncrease={this.handleIncrement}\n\t\t\t\t\tonDecrease={this.handleDecrement}\n\t\t\t\t/>\n\t\t\t);\n\t\t}\n\t};\n\n\t/* render: either loading spinner or list of sorted jokes. */\n\n\t// \treturn (\n\t// \t\t<div className=\"JokeList\">\n\t// \t\t\t<button className=\"JokeList-getmore\" onClick={generateNewJokes}>\n\t// \t\t\t\tGet New Jokes\n\t// \t\t\t</button>\n\n\t// \t\t\t{sortedJokes.map((j) => (\n\t// \t\t\t\t<Joke\n\t// \t\t\t\t\ttext={j.joke}\n\t// \t\t\t\t\tkey={j.id}\n\t// \t\t\t\t\tid={j.id}\n\t// \t\t\t\t\tvotes={j.votes}\n\t// \t\t\t\t\tvote={vote}\n\t// \t\t\t\t/>\n\t// \t\t\t))}\n\t// \t\t</div>\n\t// \t);\n\t// }\n\n\t// return null;\n};\n// function JokeList({ numJokesToGet = 10 }) {\n// \tconst [jokes, setJokes] = useState([]);\n\n// \t/* get jokes if there are no jokes */\n\n// \tuseEffect(\n// \t\tfunction () {\n// \t\t\tasync function getJokes() {\n// \t\t\t\tlet j = [...jokes];\n// \t\t\t\tlet seenJokes = new Set();\n// \t\t\t\ttry {\n// \t\t\t\t\twhile (j.length < numJokesToGet) {\n// \t\t\t\t\t\tlet res = await axios.get(\n// \t\t\t\t\t\t\t'https://icanhazdadjoke.com',\n// \t\t\t\t\t\t\t{\n// \t\t\t\t\t\t\t\theaders: { Accept: 'application/json' },\n// \t\t\t\t\t\t\t}\n// \t\t\t\t\t\t);\n// \t\t\t\t\t\tlet { status, ...jokeObj } = res.data;\n\n// \t\t\t\t\t\tif (!seenJokes.has(jokeObj.id)) {\n// \t\t\t\t\t\t\tseenJokes.add(jokeObj.id);\n// \t\t\t\t\t\t\tj.push({ ...jokeObj, votes: 0 });\n// \t\t\t\t\t\t} else {\n// \t\t\t\t\t\t\tconsole.error('duplicate found!');\n// \t\t\t\t\t\t}\n// \t\t\t\t\t}\n// \t\t\t\t\tsetJokes(j);\n// \t\t\t\t} catch (e) {\n// \t\t\t\t\tconsole.log(e);\n// \t\t\t\t}\n// \t\t\t}\n\n// \t\t\tif (jokes.length === 0) getJokes();\n// \t\t},\n// \t\t[jokes, numJokesToGet]\n// \t);\n\n// \t/* empty joke list and then call getJokes */\n\n// \tfunction generateNewJokes() {\n// \t\tsetJokes([]);\n// \t}\n\n// \t/* change vote for this id by delta (+1 or -1) */\n\n// \tfunction vote(id, delta) {\n// \t\tsetJokes((allJokes) =>\n// \t\t\tallJokes.map((j) =>\n// \t\t\t\tj.id === id ? { ...j, votes: j.votes + delta } : j\n// \t\t\t)\n// \t\t);\n// \t}\n\n// \t/* render: either loading spinner or list of sorted jokes. */\n\n// \tif (jokes.length) {\n// \t\tlet sortedJokes = [...jokes].sort((a, b) => b.votes - a.votes);\n\n// \t\treturn (\n// \t\t\t<div className=\"JokeList\">\n// \t\t\t\t<button className=\"JokeList-getmore\" onClick={generateNewJokes}>\n// \t\t\t\t\tGet New Jokes\n// \t\t\t\t</button>\n\n// \t\t\t\t{sortedJokes.map((j) => (\n// \t\t\t\t\t<Joke\n// \t\t\t\t\t\ttext={j.joke}\n// \t\t\t\t\t\tkey={j.id}\n// \t\t\t\t\t\tid={j.id}\n// \t\t\t\t\t\tvotes={j.votes}\n// \t\t\t\t\t\tvote={vote}\n// \t\t\t\t\t/>\n// \t\t\t\t))}\n// \t\t\t</div>\n// \t\t);\n// \t}\n\n// \treturn null;\n// }\n\nexport default JokeList;\n"]},"metadata":{},"sourceType":"module"}